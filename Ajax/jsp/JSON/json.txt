
< JSON, JavaScript Object Notaion >
 
 
-객체, Object 
  클래스, 구조체, Map, HashTable 등을 표현할 때 사용함
   {} 로 감싸서 객체를 표현한다 
   프로퍼티 name : value 형태의 쌍으로 표현한다 
   name은 문자열로 표현 value는 어떤 타입이든지 허용
   여러개의 프로퍼티를 표현할 때 각 프로퍼티들을 , 로 구분한다 
   ex) 빈 객체 - { }
   ex) {"key1":"value", "key2:obj, "key3":123,...}

-배열, Array 
   배열, ArrayList, List, Vector, Sequece 등을 표현할 때 사용
   [ ] 로 감싸서 표현 
   key값 없이 요소(데이터)만 나열하여 표현함
   ex) 빈 배열- [ ] 
   ex) [ "value1", "value2", obj, 123, ......]

-문자열, String 
   "data"

-숫자 Number
   data

-true, false ,null
   
+마샬링, Marshalling
	-데이터를 전달하기 위해서 특정 표기법으로 변환하는 것

	-java 데이터 -> json 표기법(servlet, servlet, jsp)

	-javascript 데이터 -> json 표기법(client) 

	-JSON 형식을 주로 사용하고 XML형식을 사용하기도 한다

+언마샬링,  Unmarshalling
	-마샬링되어 전달된 데이터를 자신의 시스템(프로그래밍 언어)에 맞게 복원하는 것

+직렬화
   -스트림을 통해서 데이터를 전송하기 위해 데이터를 1바이트 단위로 잘게 나누는 것

+역질렬화
   -스트림을 통해 전송된 데이터를 수신하기 위해 1바이트 단위 데이터들을 
   원본 형태로 복원하는 것

**원본데이터 -> 마샬링 -> 직렬화 -> 송신 -> 수신 -> 역질렬화 

< GSON API 라이브러리 >
 - 구글에서 제공하는 json관련 자바 라이브러리
 - JAVA 데이터 <-> JSON 변환을 도와주는 라이브러리
 - 자바언어의 데이터를 마샬링, 언마샬링할 수 있도록 도와준다
   -> http://mvnrepository.com/ 메이븐저장소
	** 메이븐(Maven) - 빌드관리자(스프링에서 사용)
 	** 빌드(Build) - 실행가능 형태의 결과물을 만드는 작업
	 라이브러리 코드와 개발한 코드가 결합되는 과정
	** 메이븐은 프로그램에서 사용한 추가 라이브러리들을 관리한다
- gson 검색 -> 클릭 -> 최신버전 클릭 -> jar다운로드

< jQuery 라이브러리를 이용한 Ajax >

 - XHR 객체를 이용한 순수 자바스크립트 AJAX는 크로스브라우징이 지원되지 않는다
 - XHR 객체를 이용한 코드 작성이 불편하다
 - jQuery Ajax API 는 크로스브라우징이 지원된다
 - jQuery DOM을 이용하여 응답데이터를 손쉽게 적용할 수 있다

< jQuery Ajax API >

 - $객체.load( url [,data] [,success] [,dataType] );
 - $get( url [,data] [,success] [,dataType] );
 - $post( url [,data] [,success] [,dataType] );
 - $.ajax( url [,setting] );
 - $.ajax( setting);

< jQuery Ajax API 01 - $객체.load() >

 - $객체.load(url [,data] [,complete] );
	AJAX요청의 결과로 받은 응답 데이터를 지정된 객체에 곧바로 적용한다.
	주로 응답데이터는 HTML형식의 데이터가 필요하게 된다
	AJAX 처리 후에 추가적인 기능을 complete속성에 콜백함수로 적용된다

	url
		AJAX 통신을 수행할 URL
		뒤에 '?'와 함께 쿼리스트림을 붙여서  GET Method 통신으로 사용된다
	data
		AJAX통신에 사용할 전달 파라미터
		JSON Object 타입, String 타입 사용가능
		JSON Object 	- POST 방식으로 처리
		String		- GET 방식으로 처리
	complete
		요청 완료 후에 추가 작업을 수행할 callback 함수 지정		
		콜백함수의 유형
		function(
		 String responseText //응답데이터		
		 , String rextStatus // 응답상태 메세지 
		 , jqXHR jqXHR // XHR객체를 jQuery 객체로 변환한 것
		)

< jQuery Ajax API 02 - $.get(), $.post() > 
	
 - $.get(url [,data] [,success] [,dataType])
 - $.post(url [,data] [,success] [,dataType])

	GET(POST) 메소드를 이용하여  AJAX 요청을 보내고 응답을 받는다
	
	url  : AJAX 통신을 수행할 URL
	data : 전달파라미터
		JOSN Object, String 사용 가능
	success : 요청에 대한 응답이 성공적일 때 호출되는 콜백함수
		function(
			Object data //응답데이터
			,String textStatus // 응답상태 메세지
			,jqXHR jqXHR //jQuery XHR객체
		)	
	dataType : 응답메세지의 데이터타입
		응답받은 데이터를 지정한 속성값의 데이터타입으로 추출(파싱)한다
		'xml', 'json','script','text','html'
		주로 json, html을 사용하게 된다	

< jQuery Ajax API 03 - $.ajax() >

 - $.ajax(url [, settings] )
 
 - $.ajax(settings)
 
 ** settings는 AJAX 통신 설정 옵션
 ** settings 옵션들 중에 url 이 포함되어있다
 
<  settings 옵션들 >	

[ 다음 6가지 옵션은 필수적으로 넣어서 사용하는 것이 좋다 ]

 - type
      요청 메소드
      
      "GET" ( 기본값 ) || "POST"

 - url
      AJAX 통신 요청 URL
      
      String 타입으로 설정
 
 - data
      요청 파라미터
      
      JSON Object, String, Array 타입
 
 - dataType
      응답 데이터의 처리방식
      응답 데이터를 지정한 형식으로 파싱한다
      
      "xml" | "json" | "script" | "html" | "text"
      
      ** 서버로부터 받은 응답데이터와 dataType 에 지정한 형식이 불일치하면 $.ajax() 메소드는 에러가 발생한다
 - success
 	요청/응답 성공 시 호출되는 콜백 함수
	function(
		Anything data //응답데이터(어떤 데이터든 모든)
	 	, String textStatus //응답 상태 메세지
		, jqXHR jqXHR //jQuery XHR객체		
	)
 - error
	요청/응답 실패 시 호출되는 콜백 함수
	fucntion(
		jqXHR jqXHR //jQuery XHR 객체
		, String textStatus //응답상태메세지
		, String errorThrown //발생한 에러의 정보
	}

 - async
	비동기 처리 설정
	true(기본값, 비동기) | false

 - beforeSend
	AJAX 요청 전 처리할 기능을 작성할 수 있는 콜백 함수
	function(
		jqXHR jqXHR
		, Object settings
	)

 - complete
	응답 완료 후 처리할 기능을 작성할 수 있는 콜백 함수
	AJAX 성공/실패에 상관없이 무조건 호출되는 함수
		 
 - method
	"GET" | "POST" | "PUT" | "DELETE" ... 
	RESTful 요청 메소드를 지정할 수 있게 해주는 옵션들
	 	
 - statusCode
	응답 상태 코드에 따라 처리함수를 각각 지정할 수 있게 만들어주는 옵션
	
	JSON Object 형식으로 설정함
	ex) statusCode: {
		404 : function(){}
		, 405 : function(){}
		, 500 : function(){}
		}
	=> 잘안함





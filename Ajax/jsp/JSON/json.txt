
< JSON, JavaScript Object Notaion >
 
 
-객체, Object 
  클래스, 구조체, Map, HashTable 등을 표현할 때 사용함
   {} 로 감싸서 객체를 표현한다 
   프로퍼티 name : value 형태의 쌍으로 표현한다 
   name은 문자열로 표현 value는 어떤 타입이든지 허용
   여러개의 프로퍼티를 표현할 때 각 프로퍼티들을 , 로 구분한다 
   ex) 빈 객체 - { }
   ex) {"key1":"value", "key2:obj, "key3":123,...}

-배열, Array 
   배열, ArrayList, List, Vector, Sequece 등을 표현할 때 사용
   [ ] 로 감싸서 표현 
   key값 없이 요소(데이터)만 나열하여 표현함
   ex) 빈 배열- [ ] 
   ex) [ "value1", "value2", obj, 123, ......]

-문자열, String 
   "data"

-숫자 Number
   data

-true, false ,null
   
+마샬링, Marshalling
	-데이터를 전달하기 위해서 특정 표기법으로 변환하는 것

	-java 데이터 -> json 표기법(servlet, servlet, jsp)

	-javascript 데이터 -> json 표기법(client) 

	-JSON 형식을 주로 사용하고 XML형식을 사용하기도 한다

+언마샬링,  Unmarshalling
	-마샬링되어 전달된 데이터를 자신의 시스템(프로그래밍 언어)에 맞게 복원하는 것

+직렬화
   -스트림을 통해서 데이터를 전송하기 위해 데이터를 1바이트 단위로 잘게 나누는 것

+역질렬화
   -스트림을 통해 전송된 데이터를 수신하기 위해 1바이트 단위 데이터들을 
   원본 형태로 복원하는 것

**원본데이터 -> 마샬링 -> 직렬화 -> 송신 -> 수신 -> 역질렬화 

< GSON API 라이브러리 >
 - 구글에서 제공하는 json관련 자바 라이브러리
 - JAVA 데이터 <-> JSON 변환을 도와주는 라이브러리
 - 자바언어의 데이터를 마샬링, 언마샬링할 수 있도록 도와준다
   -> http://mvnrepository.com/ 메이븐저장소
	** 메이븐(Maven) - 빌드관리자(스프링에서 사용)
 	** 빌드(Build) - 실행가능 형태의 결과물을 만드는 작업
	 라이브러리 코드와 개발한 코드가 결합되는 과정
	** 메이븐은 프로그램에서 사용한 추가 라이브러리들을 관리한다
- gson 검색 -> 클릭 -> 최신버전 클릭 -> jar다운로드

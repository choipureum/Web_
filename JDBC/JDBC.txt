+ JDBC, Java dataBase Connectivity

  - 자바에서 데이터베이스에 접속/관리할 수 있게 해주는 드라이버(API)
  
  - 자바로 작성된 프로그램으로 DB와 관련된 작업을 처리할 수 있도록
    제공되는 기능(코드)들을 모아놓은 것
    
  ** OJDBC
  
        Oracle JDBC
        
        오라클 데이터베이스를 관리할 수 있도록 도와주는 JDBC
        
        
        OJDBC버전     요구 JDK버전
        
        OJDBC 6       JDK 6이상       오라클11gR2 -- 이거 쓸 예정
  
        OJDBC 5       JDK 5이상
        
        OJDBC 14      JDK 1.4 이상
        
        OJDBC 13      JDK 1.3 이상
        
        OJDBC 12      JDK 1.2 이상
        
+ OJDBC 라이브러리 찾기

  - 오라클이 설치된 컴퓨터에서 찾기
  
  C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib\odjbc6.jar
  
  - 오라클 홈페이지에서 찾기
  
        www.oracle.com 홈페이지 하단 Resources for
        
        Devleloper 클릭
        
        Databases 클릭
        
        하단에서 Languages 에서 JAVA 클릭
        
        JDBC DOWNLOAD 클릭
        
        11gR2 버전 맞게 다운로드
        
        ojdbc6.jar 다운로드
        (로그인 필요함)
        
+ 자바 프로젝트에 OJDBC 설치하기 (적용하기)        

  1. Dynamic Web Project에서 ojdbc6.jar 를 복사하여 추가한다
  
      WebContent\WEB-INF\lib\ 폴더에 ojdbc6.jar 파일을 복사/붙여넣기
      
      -> 자동으로 연결됨
      
      
  2. 자바프로젝트에서 라이브러리로 ojdbc6.jar 선택하여 추가하기
  
        프로젝트 이름에서 우클릭
        
        Build Path - Configure Build Path... 클릭
        
        Libraries 탭 선택
        
        오른쪽 버튼 중에서 ADD JARs 버튼 (프로젝트 경로 내 파일 선택)
        오른쪽 버튼 중에서 ADD External JARs 버튼 (프로젝트 밖 파일)
        
        ** 되도록 프로젝트 내에 jar 파일을 두고 ADD JARs 로 해결할 것
        
< execute 메소드의 종류 >

 - 매개변수로 전달받은 sql구문을 수행하는 메소드

 - ResultSet executeQuery(String url);
	SELECT 쿼리의 결과를 ResultSet 으로 반환
	ResultSet에는 조회된 모든 행을 담고 있다
	ResultSet객체.next() 호출할 때마다 결과집합의 각 행을 나타낸다

 - int executeUpdate(String url);
	영향받은 행의 수를 int형으로 반환
	주로 INSERT, UPDATE, DELETE를 수행할 때 사용한다	
	
 - boolean execute(String url);
	반환값
	true : ResultSet 객체를 반환하는 쿼리를 수행했을 때(SELECT)
	false : ResultSet 객체를 반환하지 않는 쿼리를 수행했을 때
	
	주로 DDL(CREATE, ALTER, DROP)을 수행할 때 사용한다

< DTO, Data Transmission Object >

 - 데이터 전송 객체

 - 계층(Layer)간 데이터 교환을 위해 작성되는 자바 클래스

 - DTO 작성 규칙
	멤버 필드는 모두 private 접근 제한자를 적용한다 
	메소드는 getter setter toString 만 작성한다
	(추가적인 일반 메소드는 작성하지 않는다)
	(데이터 이외의 추가 기능을 넣지않고 데이터에만 집중한다)

	클래스명을 데이터베이스의 테이블명으로 작성하는 것이 좋다
	클래스의 필드명은 데이터베이스의 컬럼명으로 작성하는 것이 좋다

	

< VO, Value Object >

 - 데이터를 저장하기 위해 작성되는 자바 클래스

< DAO, Data Access Object >

 - 데이터베이스의 데이터에 접근하기 위해 작성되는 객체

 - 데이터베이스에 수행할 SQL 구문 하나를 하나의 메소드로 구현한다

 
 - inerface 와 class로 나누어서 작성하면 좋다
	-> interface에서 구현된 메소드들의 목록을 간편히 확인할 수 있다
	-> interface에 메소드마다 주석을 작성해놓는 것이 좋다
	(전체적인 개요를 한눈에 볼 수 있음)

	-> 클래스에는 실제 구현 코드를 작성한다
	-> interface는 개발하는 시점에 메소드 형식에 대한 가이드가 된다
 


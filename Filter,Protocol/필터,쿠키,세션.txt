
< 서블릿 필터, Filter >

 - 클라이언트와 서버프로그램 사이에서 요청(request)과 응답(response)를 이용해서 추가작업을 
할수 있도록 만들어진 요소

 - 요청 정보의 한글 인코딩을 설정
	POST  전달 파라미터 설정
	
 - 응답 정보의 한글 인코딩을 설정
	응답 메세지의 ContentType  설정
 
 - 로그인 정보 검사
	ex) 관리자인지 일반사용자인지 구분
	ex) 등급별 사용자 구분

 < 서블릿 생명 주기 >

 첫번째 요청: 객체 생성-  init() - service() - destroy()

< 무상태 프로토콜, Stateless Protocol >

 - 통신상태 정보를 저장하지 않는 프로토콜 
 - 통신정보 : 서버- 클라이언트간의 통신 정보

 - 새로운 요청이 발생하면 서버는 이전에 왔던 요청의 같은 클라이언트인지
 - 구분하지 않는다
 - 웹(HTTP)에서는 요청마다 독립적인 통신으로 판단한다
 - 프로토콜만으로는 동인한 사용자의 연속된 요청인지 판단할 수 없다

< 상태관리 메커니즘 >
 - 사용자(클라이언트)의 정보를 관리(유지)하는 기술

 - 쿠키, Cookie
	서버의 정보를 클라이언트(브라우저)에 저장하는 기술
	웹서버가 필요할 때 쿠키 정보를 꺼내서 사용할 수 있게 만들어 준다
	자바에서는 javax.servlet.http.Cookie 객체를 이용하여 관리한다
	쿠키정보는 name=value 쌍으로 이루어진 정보이다
	여러개의 쿠키를 저장할 수 있다
	브라우저는 도메인별로 쿠키를 저장하고 관리한다
	쿠키는 유지시간(MaxAge)을 가지고 있다 - 쿠키보관기간
		기본값은 무한
		초단위로 설정 가능함

   +쿠키의 기본 동작 흐름
	
	1. 클라이언트(브라우저)는 서버에 요청을 보낼 때 항상 쿠키 정보를 포함하여 전달한다
		- 요청정보에 포함시킴
	   없으면 안 보냄
	
	2. 서버는 클라이언트의 요청데이터에서 쿠키정보를 확인할 수 있다.
		응답헤더의 Set-Cookie 항목을 통해서 브라우저에 쿠키를 저장할 수 있다
	
   + 서블릿(자바)코드를 이용한 쿠키 관리
	
	- request.getCookies() : 요청정보에서 쿠키 정보 꺼내기
	- response.setCookie() : 응답정보를 이용해 쿠키정보 저장시키기

		** JSP에서도 사용가능하다 
    + EL을 이용한 쿠키 관리
	- ${cookie} : 쿠키정보 내장 객체
	- ${cookie.키.value } : "키"에 해당하는 쿠키 값을 출력하는 코드
	 	 

 - 세션, Session
	서버-클라이언트 간의 정보를 교환 기술
	서버-클라이언트 연결 상태를 유지하는 기술

	서버가 클라이언트의 요청을 식별하는 방법
	- javax.servlet.http.HttpSession 객체를 사용한다
	- request(요청객체)를 통해서 HttpSession 객체를 얻어와 사용하게 된다
		ex) HttpSession session = request.getSession();

 	- 서버가 사용자의 정보를 유지하기 위한 기술
		ex) 로그인 상태 

	- 쿠키보다 상태 정보에 대한 유지력, 보안성이 좋다
	- 쿠키 정보는 클라이언트에 저장되고, 언제든 지워질 위험이 있다
	- 세션정보는 서버가 관리한다
 	- 클라이언트 (브라우저) 별로 따로 관리한다
	- 세션 정보는 기본적으로 메모리로 관리한다
		
    + 세션의 동작 원리
	- 클라이언트의 요청(첫 접속)이 들어오면 서버는  SESSION ID를 생성한다
	- 서버가 응답하면서 Set-Cookie 헤더값을 이용해 SESSION ID를 클라이언트에게 전송함
	- 클라이언트는 쿠키로 SESSION ID를 저장한다
	- 클라이언트는 다음 요청때마다 SESSION ID 쿠키값을 서버로 같이 전송한다

	** 서버는 SESSION ID별로 세션정보 공간을 관리한다
	** 클라이언트가 종료되면 세션 정보가 지워진다(자동) 
	** 아파치 톰캣 서버는 기본으로 JSESSIONID라는 이름으로 
	SESSION ID  를 발급 함

